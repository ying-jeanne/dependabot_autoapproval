# Auto-merge as documented in official Github docs
# https://docs.github.com/en/code-security/dependabot/working-with-dependabot/automating-dependabot-with-github-actions

name: Auto-merge Dependabot PRs
on: pull_request_target

permissions:
  pull-requests: write
  contents: write

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]'}}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v1.5.1
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Check Whitelist
        id: check-whitelist
        if: ${{steps.dependabot-metadata.outputs.update-type == 'version-update:semver-patch' || steps.dependabot-metadata.outputs.update-type == 'version-update:semver-minor'}}
        run: |
          # read dependencies into an array libsUpdated
          IFS=', ' read -r -a libsUpdated <<< "${{ steps.fetch-metadata.outputs.dependency-names }}"

          # loop on the array to make sure all libraries updated are whitelisted
          all_in_whitelist="true"

          # if one of the element not in white list, set flag to false
          for lib in "${libsUpdated[@]}"
            do
              exists=$(jq --arg lib "$lib" 'any(.[]; .name == $lib)' whitelist.json)
              if [[ "$exists" != "true" ]]; then
                 all_in_whitelist="false";
                 break;
              fi
            done

          if [[ "$all_in_whitelist" == "true" ]]; then
            echo "::set-output name=allInWhitelist::true"
          else
            echo "::set-output name=allInWhitelist::false"
          fi

      - name: Approve and auto-merge
        if: steps.check-whitelist.outputs.allInWhitelist == 'true'
        # See https://github.com/dependabot/fetch-metadata for the outputs
        # If blocks:
        #  - Patches to auto-merge
        #  - Minor updates to auto-merge
        #  - Updates to auto-merge regardless of level (major, minor or patch)
        #  - Projects that should be auto-merged regardless of level (major, minor or patch)
        # if: |
        #   contains(fromJson('[
        #     "alpine",
        #     "golang",
        #     "gorm.io/driver/sqlite",
        #     "github.com/anchore/grype",
        #     "github.com/aquasecurity/trivy",
        #     "github.com/aws/aws-sdk-go-v2/config",
        #     "github.com/bmatcuk/doublestar/v4",
        #     "github.com/caarlos0/env/v6",
        #     "github.com/prometheus/client_golang",
        #     "github.com/sirupsen/logrus",
        #     "github.com/slack-go/slack",
        #     "github.com/urfave/cli",
        #     "github.com/urfave/cli/v2",
        #     "k8s.io/api",
        #     "k8s.io/apimachinery",
        #     "k8s.io/client-go",
        #     "Sonia-corporation/stale"
        #   ]'), 'Sonia-corporation/stale')
        run: |
          # echo "Output value is true."
          # gh pr merge --auto --squash "$PR_URL"
          gh pr review $PR_URL --approve -b "I'm **approving** this pull request because **it includes a patch or minor update in whitelist**"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}