# Auto-merge as documented in official Github docs
# https://docs.github.com/en/code-security/dependabot/working-with-dependabot/automating-dependabot-with-github-actions

name: Auto-review Dependabot PRs
on: pull_request_target

permissions:
  pull-requests: write
  contents: write

jobs:
  dependabot-reviewer:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.user.login == 'dependabot[bot]' }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v1.5.1
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Check Whitelist
        id: check-whitelist
        if: ${{steps.metadata.outputs.update-type == 'version-update:semver-patch' || steps.metadata.outputs.update-type == 'version-update:semver-minor'}}
        run: |
          # set the path to configuration file
          cfg_path=".github/workflows/whitelist.json"
          
          # read dependencies into an array libsUpdated
          IFS=', ' read -r -a libsUpdated <<< "${{ steps.metadata.outputs.dependency-names }}"

          # loop on the array to make sure all libraries updated are whitelisted
          all_in_whitelist="true"

          reason_array=()
          # if one of the element not in white list, set flag to false
          for lib in "${libsUpdated[@]}"
            do
              exists=$(jq --arg lib "$lib" 'any(.[]; .name == $lib)' $cfg_path)
              if [[ "$exists" != "true" ]]; then
                echo "$lib is not in the whitelist, manual review is required."
                all_in_whitelist="false";
                break;
              else
                reason_array+=(jq 'select(.[] | select(.name == "$lib") | .reason)' $cfg_path)
              fi
            done

          if [[ "$all_in_whitelist" == "true" ]]; then
            echo "All dependencies are in the whitelist."
            reasons=$(IFS=','; echo "${reason_array[*]}")
            echo "::set-output name=reasons::$reasons"
            echo "::set-output name=allInWhitelist::true"
          else
            echo "Not all dependencies are in the whitelist."
            echo "::set-output name=allInWhitelist::false"
          fi

      - name: Approve and auto-merge
        if: steps.check-whitelist.conclusion == 'success' && steps.check-whitelist.outputs.allInWhitelist == 'true'
        run: |
          gh pr merge --auto --squash "$PR_URL"
          gh pr review $PR_URL \
          --approve -b "I'm **approving** this pull request because it includes **a patch or minor update in \
          whitelist**, with reason ${{ steps.check-whitelist.outputs.reasons}}."
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      # - name: Manual review is required
      #   if: steps.check-whitelist.conclusion != 'success' || steps.check-whitelist.outputs.allInWhitelist == 'false'
      #   run:
